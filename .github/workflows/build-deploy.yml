name: Build and deploy
on: workflow_dispatch
jobs:
  job1:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    # Map a step output to a job output
    outputs:
     # output1: ${{ steps.create_release.outputs.test }}
      output2: ${{ steps.step2.outputs.upload_url }}
    steps:
      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          #tag_name: ${{ github.ref }}
          tag_name: ${{ github.run_number }}
          #release_name: Release ${{ github.ref }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
      
        #run: echo "test=hello" >> "$GITHUB_OUTPUT"
      - id: step2
        run: echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> "$GITHUB_OUTPUT"
  #job2:
  #  runs-on: ubuntu-latest
  #  needs: job1
  #  steps:
  #    - env:
       
  #        OUTPUT2: ${{needs.job1.outputs.output2}}
  #      run: echo "$OUTPUT2"
  job2:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    needs: job1
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]#, macos-latest]
        include:
          - os: windows-latest
            vcpkgCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'
          - os: ubuntu-latest
            vcpkgCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'
          #- os: macos-latest
          #  vcpkgCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'

    steps:
      - env:
          OUTPUT2: ${{needs.job1.outputs.output2}}
        run: echo "$OUTPUT2"
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: lukka/get-cmake@latest
      - name: List $RUNNER_WORKSPACE before build
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'
          # Run vcpkg with the command specified by the `runVcpkgFormatString` input.
          runVcpkgInstall: true
          vcpkgJsonGlob: '**/cmakepresets/vcpkg.json'

      - name: Prints output of run-vcpkg's action.
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "

      - name: Run CMake with Ninja
        uses: lukka/run-cmake@v10
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/cmakepresets/CMakeLists.txt'
          configurePreset: 'ninja-multi-vcpkg'
          buildPreset: 'ninja-multi-vcpkg'
          
            
      - name: Run CMake-CPack
        run: cmake --build ${{ github.workspace }}/cmakepresets/builds/ninja-multi-vcpkg --target package 

      - name: List $RUNNER_WORKSPACE after build
        run: find $RUNNER_WORKSPACE
        shell: bash

      #- name: Get and print Output Upload_url
      #  if: matrix.os == 'ubuntu-latest'
      #  id: get_output
      #  run: echo "$Upload_url"
                
      - name: Upload Release Asset Linux
        if: matrix.os == 'ubuntu-latest'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.job1.outputs.output2}} #${{ needs.print_create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/cmakepresets/builds/ninja-multi-vcpkg/buildeploy-0.0.${{ github.run_number }}-Linux.deb
          asset_name: buildeploy-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package
