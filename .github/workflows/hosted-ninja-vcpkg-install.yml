# Copyright (c) 2019-2020-2021-2022-2023 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
#
# The peculiarity of this workflow is that runs `vcpkg install` at `run-vcpkg`, 
# rather than with `run-cmake.
# Also, it does not assume that vcpkg is a submodule of this repository.
#
# The workflow does the following:
# - Download and setup vcpkg (which is stored NOT in a Git submodule), then run
#   `vcpkg install` to install the packages described in vcpkg.json manifest file.
# - Note: at this point, all the vcpkg dependencies specified in vcpkg.json are installed,
#   and it is possible to run anything that is needed to build the C++ application as.
#   long the paths to headers and libraries are correctly set.
#
# - _Warning:_ in this sample, CMake is going to be used to build the application, 
#   but anything else could be used. This means that vcpkg will be run again and 
#   it will quickly realize that all dependencies are already installed.
#   In short: *it is not needed to run vcpkg* in the step before if you build with CMake,
#   since CMake will run it for you already! 
#   Look to (hosted-ninja-vcpkg_submod.yml)[./hosted-ninja-vcpkg_submod.yml] sample.
#
# - Finally, it runs CMake with CMakePreset.json and vcpkg's toolchain file to build 
#   the C++ sources with Ninja.
name: hosted-ninja-vcpkg-install-cacheoff
on: workflow_dispatch

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]#, macos-latest]
        include:
          - os: windows-latest
            vcpkgCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'
          - os: ubuntu-latest
            vcpkgCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'
          #- os: macos-latest
          #  vcpkgCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: lukka/get-cmake@latest
      - name: List $RUNNER_WORKSPACE before build
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'
          # Run vcpkg with the command specified by the `runVcpkgFormatString` input.
          runVcpkgInstall: true
          vcpkgJsonGlob: '**/cmakepresets/vcpkg.json'

      - name: Prints output of run-vcpkg's action.
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "

      - name: Run CMake with Ninja
        uses: lukka/run-cmake@v10
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/cmakepresets/CMakeLists.txt'
          configurePreset: 'ninja-multi-vcpkg'
          buildPreset: 'ninja-multi-vcpkg'
          
            
      - name: Run CMake-CPack
        run: cmake --build ${{ github.workspace }}/cmakepresets/builds/ninja-multi-vcpkg --target package 

      - name: List $RUNNER_WORKSPACE after build
        run: find $RUNNER_WORKSPACE
        shell: bash
        
      - name: Create Release
        if: matrix.os == 'ubuntu-latest'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset Linux
        if: matrix.os == 'ubuntu-latest'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/cmakepresets/builds/ninja-multi-vcpkg/buildeploy-0.0.${{ github.run_number }}-Linux.deb
          asset_name: buildeploy-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package
          
      - name: Upload Release Asset Windows
        if: matrix.os == 'windows-latest'
        uses: JasonEtco/upload-to-release@v0.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          #upload_url: ${{ steps.create_release.outputs.upload_url }}
          args: win/win.exe application/octet-stream
